{
    "vertShader": [
        "#version 300 es",
        "layout (location = 0) in vec3 vertexPosition;",
        "layout (location = 1) in vec3 vertexNormal;",
        "uniform mat4 uProjectionMatrix;",
        "uniform mat4 uViewMatrix;",
        "uniform mat4 uModelMatrix;",
        "uniform mat4 normalMatrix;",
        "out vec3 oFragPosition;",
        "out vec3 oNormal;",
        "out vec3 normalInterp;",
        "void main() {",
        "    gl_Position = uProjectionMatrix * uViewMatrix * uModelMatrix * vec4(vertexPosition, 1.0);",
        "    oFragPosition = (uModelMatrix * vec4(vertexPosition, 1.0)).xyz;",
        "    oNormal = normalize((uModelMatrix * vec4(vertexNormal, 1.0)).xyz);",
        "    normalInterp = vec3(normalMatrix * vec4(vertexNormal, 0.0));",
        "}"
    ],
    "attribs": [
        "vertexPosition",
        "vertexNormal"
    ],
    "uniforms": [
        "uProjectionMatrix",
        "uViewMatrix",
        "uModelMatrix",
        "normalMatrix",
        "uCameraPosition",
        "numLights",
        "diffuseVal",
        "ambientVal",
        "specularVal",
        "nVal",
        "uLightPositions",
        "uLightColours",
        "uLightStrengths"
    ],
    "fragShader": [
        "#version 300 es",
        "#define MAX_LIGHTS 128",
        "precision highp float;",
        "in vec3 oFragPosition;",
        "in vec3 oNormal;",
        "in vec3 normalInterp;",
        "uniform vec3 uCameraPosition;",
        "uniform int numLights;",
        "uniform vec3 diffuseVal;",
        "uniform vec3 ambientVal;",
        "uniform vec3 specularVal;",
        "uniform float nVal;",
        "uniform vec3 uLightPositions[MAX_LIGHTS];",
        "uniform vec3 uLightColours[MAX_LIGHTS];",
        "uniform float uLightStrengths[MAX_LIGHTS];",
        "out vec4 fragColor;",
        "void main() {",
        "    vec3 normal = normalize(normalInterp);",
        "    vec3 ambient = vec3(0,0,0);",
        "    vec3 diffuse = vec3(0,0,0);",
        "    vec3 specular = vec3(0,0,0);",
        "    for (int i = 0; i < numLights; i++) {",
        "        vec3 nCameraPosition = normalize(uCameraPosition); // Normalize the camera position",
        "        vec3 V = normalize(nCameraPosition - oFragPosition);",
        "        vec3 lightDirection = normalize(uLightPositions[i] - oFragPosition);",
        "        float diff = max(dot(lightDirection, normal), 1.0);",
        "        vec3 reflectDir = reflect(-lightDirection, normal);",
        "        float spec = pow(max(dot(V, reflectDir), 0.0), nVal);",
        "        float lightDistance = length(uLightPositions[i] - oFragPosition);",
        "        float attenuation = 1.0 / (lightDistance * lightDistance);",
        "        attenuation *= uLightStrengths[i];",
        "        //ambient",
        "        ambient += (ambientVal * uLightColours[i]) * diffuseVal;",
        "        //diffuse",
        "        diffuse += diffuseVal * uLightColours[i] * diff;",
        "        if (diff > 0.0f)",
        "        {",
        "            specular += specularVal * uLightColours[i] * spec;",
        "            specular *= attenuation;",
        "        }",
        "        ambient *= attenuation; //causes much darker scene",
        "        diffuse *= attenuation;",
        "    }",
        "    fragColor = vec4(ambient + diffuse + specular, 1.0);",
        "}"
    ]
}